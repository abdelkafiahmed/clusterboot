---
- name: Ensure download directory exists
  file: path={{spark_download_dir}} state=directory recurse=yes

- name: Download spark
  get_url:
    url: "{{spark_download_url}}"
    dest: "{{spark_download_dir}}/{{spark_archive_file}}"
    checksum: md5:{{spark_md5}}

- name: Extract spark
  unarchive:
    src: "{{spark_download_dir}}/{{spark_archive_file}}"
    dest: "{{spark_lib_dir}}"
    owner: root
    group: root
    copy: no
    creates: "{{spark_target}}"

- name: Link generic spark dir to specific version directory
  file:
    path: "{{spark_home}}"
    src: "{{spark_target}}"
    state: link

- name: Ensure configuration directory exists
  file: path={{spark_conf_dir}} state=directory

- name: Remove old conf
  file: path={{spark_home}}/conf state=absent

- name: Link Spark configuration directory
  file:
    path: "{{spark_home}}/conf"
    src: "{{spark_conf_dir}}"
    state: link
    force: yes

- name: Add executable scripts
  template:
    src: "{{item}}.j2"
    dest: "{{spark_bin_dir}}/{{item}}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - spark-shell
    - spark-executor
    - spark-submit
    - pyspark

- name: Add conf file
  template:
    src: "{{item}}.j2"
    dest: "{{spark_conf_dir}}/{{item}}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - spark-env.sh
    - spark-defaults.conf
    - log4j.properties
    - metrics.properties
    - slaves

- name: Create spark user to manage logs in history server
  user:
    name: spark
    groups: hadoop
    system: yes
    home: "{{spark_workdir}}"

- name: Add History-server service
  template:
    src: spark-history-server.service.j2
    dest: /etc/systemd/system/spark-history-server.service
  when: "inventory_hostname == history_hostname"
